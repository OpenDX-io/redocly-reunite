openapi: 3.0.3
info:
  title: Demo API
  version: 1.0.0
  description: A simple API for demonstration purposes with three endpoints.
servers:
  - url: https://api.example.com/v1
    description: Production Server
  - url: https://staging.api.example.com/v1
    description: Staging Server
paths:
  /users:
    get:
      summary: Retrieve a list of users
      description: Fetches a list of all registered users in the system.
      operationId: getUsers
      responses:
        "200":
          description: A JSON array of user objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      description: Unique identifier for the user.
                    name:
                      type: string
                      description: Name of the user.
      x-code-samples:
        - lang: JavaScript
          source: |
            const fetch = require('node-fetch');
            fetch('https://api.example.com/v1/users')
              .then(response => response.json())
              .then(data => console.log(data))
              .catch(error => console.error('Error:', error));

  /users/{userId}:
    get:
      summary: Get user details
      description: Fetches detailed information about a specific user by their ID.
      operationId: getUser
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user to retrieve.
          schema:
            type: string
      responses:
        "200":
          description: A JSON object representing the user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: Unique identifier for the user.
                  name:
                    type: string
                    description: Name of the user.
                  email:
                    type: string
                    description: Email address of the user.
      x-code-samples:
        - lang: JavaScript
          source: |
            const fetch = require('node-fetch');
            const userId = '12345';
            fetch(`https://api.example.com/v1/users/${userId}`)
              .then(response => response.json())
              .then(data => console.log(data))
              .catch(error => console.error('Error:', error));

  /add-users:
    post:
      summary: Create a new user
      description: Adds a new user to the system with the provided details.
      operationId: addUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the user.
                email:
                  type: string
                  description: Email address of the user.
      responses:
        "201":
          description: Successfully created a new user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: Unique identifier for the newly created user.
                  name:
                    type: string
                    description: Name of the user.
                  email:
                    type: string
                    description: Email address of the user.
      x-code-samples:
        - lang: JavaScript
          source: |
            const fetch = require('node-fetch');
            const newUser = {
              name: 'John Doe',
              email: 'john.doe@example.com'
            };
            fetch('https://api.example.com/v1/users', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(newUser)
            })
              .then(response => response.json())
              .then(data => console.log(data))
              .catch(error => console.error('Error:', error));
